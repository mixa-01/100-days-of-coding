/*
 Brute Forece
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        
    if (root == nullptr) return nullptr;
    TreeNode* node = new TreeNode ( root->val);
        node -> right = invertTree ( root->left);
        node -> left = invertTree ( root->right);

        return node;
        
    }
};

//BFS

class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
         if (root == nullptr) return nullptr;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            TreeNode* node = q.front();
            q.pop();
            swap(node->left,node->right);
            if(node->left != nullptr) q.push(node->left);
            if(node->right != nullptr) q.push(node->right);            
        }
        
    
        return root;
    }
};
