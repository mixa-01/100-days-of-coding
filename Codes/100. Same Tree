// BruteForcing

class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p == nullptr && q == nullptr)
        return true;

   
    if (p == nullptr || q == nullptr) return false;
        return (p->val == q->val) &&
           isSameTree(p->left, q->left) &&
           isSameTree(p->right, q->right);
    }
};
//BFS
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p == nullptr && q == nullptr)
        return true;
        queue<TreeNode*> qp;
        queue<TreeNode*> qq;
        qp.push(p); qq.push(q);
        while(!qp.empty() && !qq.empty() ){
            TreeNode* np = qp.front();
            qp.pop();
            TreeNode* nq = qq.front();
            qq.pop();
            if (!np && !nq) continue;
            if(!np || !nq || np->val != nq->val){
                return false;
            }
            qp.push(np->left);
            qp.push(np->right);
            qq.push(nq->left);
            qq.push(nq->right);

        }

    return true;
    }
};

